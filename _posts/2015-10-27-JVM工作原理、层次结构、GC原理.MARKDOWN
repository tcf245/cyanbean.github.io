---
layout: post
title:  "JVM工作原理、层次结构、GC原理"
date:   2015-10-27 20:16:24
author: CyanBean
categories: Java
tags:	Java JVM
cover:  "assets/instacode.png"
---

JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。

##JVM工作原理

Java 虚拟机 Java 虚拟机（Java virtual machine，JVM）是运行 Java 程序必不可少的机制。JVM实现了Java语言最重要的特征：即平台无关性。原理：编译后的 Java 程序指令并不直接在硬件系统的 CPU 上执行，而是由 JVM 执行。JVM屏蔽了与具体平台相关的信息，使Java语言编译程序只需要生成在JVM上运行的目标字节码（.class）,就可以在多种平台上不加修改地运行。Java 虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。因此实现java平台无关性。它是 Java 程序能在多平台间进行无缝移植的可靠保证，同时也是 Java 程序的安全检验引擎（还进行安全检查）。

JVM 是 编译后的 Java 程序（.class文件）和硬件系统之间的接口 （ 编译后：javac 是收录于 JDK 中的 Java 语言编译器。该工具可以将后缀名为. java 的源文件编译为后缀名为. class 的可以运行于 Java 虚拟机的字节码。）

##JVM层次结构

JVM层次结构图下图所示：

<a href="//tcf245.github.io/assets/images/java/JVM-architecture.png" data-lightbox="falcon9-large" data-title="Check out the image ">
  <img src="//tcf245.github.io/assets/images/java/JVM-architecture.png" title="Check out the image ">
</a>

####classloader

作用：装载.class文件
classloader 有两种装载class的方式 （时机）：
1. 隐式：运行过程中，碰到new方式生成对象时，隐式调用classLoader到JVM
2. 显式：通过class.forname()动态加载

######双亲委派模型（Parent Delegation Model）：

类的加载过程采用双亲委托机制，这种机制能更好的保证 Java 平台的安全。
该模型要求除了顶层的Bootstrap class loader启动类加载器外，其余的类加载器都应当有自己的父类加载器。子类加载器和父类加载器不是以继承（Inheritance）的关系来实现，而是通过组合（Composition）关系来复用父加载器的代码。每个类加载器都有自己的命名空间（由该加载器及所有父类加载器所加载的类组成，在同一个命名空间中，不会出现类的完整名字（包括类的包名）相同的两个类；在不同的命名空间中，有可能会出现类的完整名字（包括类的包名）相同的两个类）

双亲委派模型的工作过程为：

1.当前 `ClassLoader` 首先从自己已经加载的类中查询是否此类已经加载，如果已经加载则直接返回原来已经加载的类。

`每个类加载器都有自己的加载缓存，当一个类被加载了以后就会放入缓存，
等下次加载的时候就可以直接返回了。`

2.当前 `ClassLoader` 的缓存中没有找到被加载的类的时候，委托父类加载器去加载，父类加载器采用同样的策略，首先查看自己的缓存，然后委托父类的父类去加载，一直到 bootstrap ClassLoader.
3. 当所有的父类加载器都没有加载的时候，再由当前的类加载器加载，并将其放入它自己的缓存中，以便下次有加载请求的时候直接返回。

使用这种模型来组织类加载器之间的关系的好处:
主要是为了安全性，避免用户自己编写的类动态替换 Java 的一些核心类，比如 String，同时也避免了重复加载，因为 JVM 中区分不同类，不仅仅是根据类名，相同的 class 文件被不同的 `ClassLoader` 加载就是不同的两个类，如果相互转型的话会抛java.lang.ClassCaseException.

类加载器 `Classloader` 是具有层次结构的，也就是父子关系。其中，Bootstrap 是所有类加载器的父亲。如下图所示：
<a href="//tcf245.github.io/assets/images/java/JVM-classloader.png" data-lightbox="falcon9-large" data-title="Check out the image ">
  <img src="//tcf245.github.io/assets/images/java/JVM-classloader.png" title="Check out the image ">
</a>

####execution engine

作用： 执行字节码，或者执行本地方法

####runtime data area


##GC
####垃圾回收技术
####heap组成
####GC工作原理
####